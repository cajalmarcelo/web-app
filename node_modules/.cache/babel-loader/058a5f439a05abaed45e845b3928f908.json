{"ast":null,"code":"import{FETCH_PAYMENT_METHODS,FETCH_PAYMENT_METHODS_SUCCESS,FETCH_PAYMENT_METHODS_FAILED,UPDATE_WALLET_BALANCE,UPDATE_WALLET_BALANCE_SUCCESS,UPDATE_WALLET_BALANCE_FAILED,CLEAR_PAYMENT_MESSAGES,UPDATE_PAYMENT_METHOD}from\"../store/types\";import{RequestPushMsg}from'../other/NotificationFunctions';import{firebase}from'../config/configureFirebase';import store from'../store/store';import{onValue,get,update,push}from\"firebase/database\";export const fetchPaymentMethods=()=>dispatch=>{const{config,paymentSettingsRef}=firebase;dispatch({type:FETCH_PAYMENT_METHODS,payload:null});const usertype=store.getState().auth.profile.usertype;if(usertype=='admin'){onValue(paymentSettingsRef,snapshot=>{const data=snapshot.val();if(data){dispatch({type:FETCH_PAYMENT_METHODS_SUCCESS,payload:data});}else{dispatch({type:FETCH_PAYMENT_METHODS_FAILED,payload:store.getState().languagedata.defaultLanguage.no_provider_found});}});}else{const settings=store.getState().settingsdata.settings;let host=window&&window.location&&settings.CompanyWebsite===window.location.origin?window.location.origin:\"https://\".concat(config.projectId,\".web.app\");let url=\"\".concat(host,\"/get_providers\");fetch(url,{method:'GET',headers:{'Content-Type':'application/json'}}).then(response=>response.json()).then(responseJson=>{if(responseJson.length>0){dispatch({type:FETCH_PAYMENT_METHODS_SUCCESS,payload:responseJson});}else{dispatch({type:FETCH_PAYMENT_METHODS_FAILED,payload:store.getState().languagedata.defaultLanguage.no_provider_found});}}).catch(error=>{dispatch({type:FETCH_PAYMENT_METHODS_FAILED,payload:store.getState().languagedata.defaultLanguage.provider_fetch_error+\": \"+error.toString()});});}};export const editPaymentMethods=data=>dispatch=>{const{paymentSettingsRef}=firebase;dispatch({type:UPDATE_PAYMENT_METHOD,payload:data});update(paymentSettingsRef,data);};export const clearMessage=()=>dispatch=>{dispatch({type:CLEAR_PAYMENT_MESSAGES,payload:null});};export const addToWallet=(uid,amount)=>async dispatch=>{const{walletHistoryRef,singleUserRef,settingsRef}=firebase;dispatch({type:UPDATE_WALLET_BALANCE,payload:null});const settingsdata=await get(settingsRef);const settings=settingsdata.val();onValue(singleUserRef(uid),snapshot=>{if(snapshot.val()){let walletBalance=parseFloat(snapshot.val().walletBalance);const pushToken=snapshot.val().pushToken;walletBalance=parseFloat((parseFloat(walletBalance)+parseFloat(amount)).toFixed(settings.decimal));let details={type:'Credit',amount:parseFloat(amount),date:new Date().getTime(),txRef:'AdminCredit'};update(singleUserRef(uid),{walletBalance:walletBalance}).then(()=>{push(walletHistoryRef(uid),details).then(()=>{dispatch({type:UPDATE_WALLET_BALANCE_SUCCESS,payload:null});}).catch(error=>{dispatch({type:UPDATE_WALLET_BALANCE_FAILED,payload:error.code+\": \"+error.message});});if(pushToken){RequestPushMsg(pushToken,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.wallet_updated,screen:'Wallet'});}}).catch(error=>{dispatch({type:UPDATE_WALLET_BALANCE_FAILED,payload:error.code+\": \"+error.message});});}},{onlyOnce:true});};export const withdrawBalance=(profile,amount)=>async dispatch=>{const{withdrawRef}=firebase;dispatch({type:UPDATE_WALLET_BALANCE,payload:null});push(withdrawRef,{uid:profile.uid,name:profile.firstName+' '+profile.lastName,amount:parseFloat(amount),date:new Date().getTime(),bankName:profile.bankName?profile.bankName:'',bankCode:profile.bankCode?profile.bankCode:'',bankAccount:profile.bankAccount?profile.bankAccount:'',processed:false});};","map":{"version":3,"names":["FETCH_PAYMENT_METHODS","FETCH_PAYMENT_METHODS_SUCCESS","FETCH_PAYMENT_METHODS_FAILED","UPDATE_WALLET_BALANCE","UPDATE_WALLET_BALANCE_SUCCESS","UPDATE_WALLET_BALANCE_FAILED","CLEAR_PAYMENT_MESSAGES","UPDATE_PAYMENT_METHOD","RequestPushMsg","firebase","store","onValue","get","update","push","fetchPaymentMethods","dispatch","config","paymentSettingsRef","type","payload","usertype","getState","auth","profile","snapshot","data","val","languagedata","defaultLanguage","no_provider_found","settings","settingsdata","host","window","location","CompanyWebsite","origin","concat","projectId","url","fetch","method","headers","then","response","json","responseJson","length","catch","error","provider_fetch_error","toString","editPaymentMethods","clearMessage","addToWallet","uid","amount","walletHistoryRef","singleUserRef","settingsRef","walletBalance","parseFloat","pushToken","toFixed","decimal","details","date","Date","getTime","txRef","code","message","title","notification_title","msg","wallet_updated","screen","onlyOnce","withdrawBalance","withdrawRef","name","firstName","lastName","bankName","bankCode","bankAccount","processed"],"sources":["C:/Users/CAJAL/Desktop/main/Sourcecode/common/src/actions/paymentactions.js"],"sourcesContent":["import {\n    FETCH_PAYMENT_METHODS,\n    FETCH_PAYMENT_METHODS_SUCCESS,\n    FETCH_PAYMENT_METHODS_FAILED,\n    UPDATE_WALLET_BALANCE,\n    UPDATE_WALLET_BALANCE_SUCCESS,\n    UPDATE_WALLET_BALANCE_FAILED,\n    CLEAR_PAYMENT_MESSAGES,\n    UPDATE_PAYMENT_METHOD\n} from \"../store/types\";\nimport { RequestPushMsg } from '../other/NotificationFunctions';\nimport { firebase } from '../config/configureFirebase';\nimport store from '../store/store';\nimport { onValue, get, update, push } from \"firebase/database\";\n\nexport const fetchPaymentMethods = () => (dispatch) => {\n\n    const {\n      config,\n      paymentSettingsRef\n    } = firebase;\n  \n    dispatch({\n      type: FETCH_PAYMENT_METHODS,\n      payload: null\n    });\n\n    const usertype = store.getState().auth.profile.usertype;\n\n    if(usertype == 'admin'){\n        onValue(paymentSettingsRef, snapshot => {\n            const data = snapshot.val(); \n            if(data){\n              dispatch({\n                type: FETCH_PAYMENT_METHODS_SUCCESS,\n                payload: data\n              });\n            } else {\n              dispatch({\n                type: FETCH_PAYMENT_METHODS_FAILED,\n                payload: store.getState().languagedata.defaultLanguage.no_provider_found,\n              });\n            }\n          });\n    } else { \n        const settings = store.getState().settingsdata.settings;\n        let host = window && window.location && settings.CompanyWebsite === window.location.origin? window.location.origin : `https://${config.projectId}.web.app`\n        let url = `${host}/get_providers`;\n        fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((response) => response.json())\n            .then((responseJson) => {\n                if (responseJson.length > 0) {\n                    dispatch({\n                        type: FETCH_PAYMENT_METHODS_SUCCESS,\n                        payload: responseJson,\n                    });\n                }else{\n                    dispatch({\n                        type: FETCH_PAYMENT_METHODS_FAILED,\n                        payload: store.getState().languagedata.defaultLanguage.no_provider_found,\n                    });\n                }\n            })\n            .catch((error) => {\n                dispatch({\n                    type: FETCH_PAYMENT_METHODS_FAILED,\n                    payload: store.getState().languagedata.defaultLanguage.provider_fetch_error + \": \" + error.toString(),\n                });\n            });\n    }\n  };\n\n  export const editPaymentMethods = (data) => (dispatch) => {\n    const {\n        paymentSettingsRef\n    } = firebase;\n    dispatch({\n      type: UPDATE_PAYMENT_METHOD,\n      payload: data \n    });\n    update(paymentSettingsRef, data);\n  }\n  \n\n\nexport const clearMessage = () => (dispatch) => {\n    dispatch({\n        type: CLEAR_PAYMENT_MESSAGES,\n        payload: null,\n    });    \n};\n\n\nexport const addToWallet = (uid, amount) => async (dispatch) => {\n    const {\n        walletHistoryRef,\n        singleUserRef,\n        settingsRef\n    } = firebase;\n\n    dispatch({\n        type: UPDATE_WALLET_BALANCE,\n        payload: null\n    });\n\n    const settingsdata = await get(settingsRef);\n    const settings = settingsdata.val();\n\n    onValue(singleUserRef(uid), snapshot => {\n        if (snapshot.val()) {\n            let walletBalance = parseFloat(snapshot.val().walletBalance);\n            const pushToken = snapshot.val().pushToken;\n            walletBalance = parseFloat((parseFloat(walletBalance) + parseFloat(amount)).toFixed(settings.decimal));\n            let details = {\n                type: 'Credit',\n                amount: parseFloat(amount),\n                date: new Date().getTime(),\n                txRef: 'AdminCredit'\n            }\n            update(singleUserRef(uid),{walletBalance: walletBalance}).then(() => {\n                push(walletHistoryRef(uid), details).then(()=>{\n                    dispatch({\n                        type: UPDATE_WALLET_BALANCE_SUCCESS,\n                        payload: null\n                    });\n                }).catch(error=>{\n                    dispatch({\n                        type: UPDATE_WALLET_BALANCE_FAILED,\n                        payload: error.code + \": \" + error.message,\n                    });            \n                })\n                if(pushToken){\n                    RequestPushMsg(\n                        pushToken,\n                        {\n                            title: store.getState().languagedata.defaultLanguage.notification_title,\n                            msg:  store.getState().languagedata.defaultLanguage.wallet_updated,\n                            screen: 'Wallet'\n                        }\n                    );\n                }\n            }).catch(error=>{\n                dispatch({\n                    type: UPDATE_WALLET_BALANCE_FAILED,\n                    payload: error.code + \": \" + error.message,\n                });\n            });\n            \n        }\n    }, {onlyOnce: true});\n};\n\n\nexport const withdrawBalance = (profile, amount) => async (dispatch) => {\n\n    const {\n        withdrawRef,\n    } = firebase;\n    \n    dispatch({\n        type: UPDATE_WALLET_BALANCE,\n        payload: null\n    });\n\n    push(withdrawRef, {\n        uid : profile.uid,\n        name : profile.firstName +  ' ' + profile.lastName,\n        amount : parseFloat(amount),\n        date : new Date().getTime(),\n        bankName : profile.bankName? profile.bankName : '',\n        bankCode : profile.bankCode? profile.bankCode : '',\n        bankAccount : profile.bankAccount? profile.bankAccount : '',\n        processed:false\n    });\n       \n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}