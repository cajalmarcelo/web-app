{"ast":null,"code":"import{FETCH_BOOKINGS,FETCH_BOOKINGS_SUCCESS,FETCH_BOOKINGS_FAILED,UPDATE_BOOKING,CANCEL_BOOKING}from\"../store/types\";import{fetchBookingLocations}from'../actions/locationactions';import{RequestPushMsg}from'../other/NotificationFunctions';import store from'../store/store';import{firebase}from'../config/configureFirebase';import{addActualsToBooking,saveAddresses,updateDriverQueue}from\"../other/sharedFunctions\";import{get,onValue,update,off,remove,push}from\"firebase/database\";import{uploadBytesResumable,getDownloadURL}from\"firebase/storage\";export const fetchBookings=()=>dispatch=>{const{bookingListRef}=firebase;dispatch({type:FETCH_BOOKINGS,payload:null});const userInfo=store.getState().auth.profile;off(bookingListRef(userInfo.uid,userInfo.usertype));onValue(bookingListRef(userInfo.uid,userInfo.usertype),snapshot=>{if(snapshot.val()){const data=snapshot.val();const active=[];let tracked=null;const bookings=Object.keys(data).map(i=>{data[i].id=i;data[i].pickupAddress=data[i].pickup.add;data[i].dropAddress=data[i].drop.add;data[i].discount=data[i].discount?data[i].discount:0;data[i].cashPaymentAmount=data[i].cashPaymentAmount?data[i].cashPaymentAmount:0;data[i].cardPaymentAmount=data[i].cardPaymentAmount?data[i].cardPaymentAmount:0;return data[i];});for(let i=0;i<bookings.length;i++){if(['PAYMENT_PENDING','NEW','ACCEPTED','ARRIVED','STARTED','REACHED','PENDING','PAID'].indexOf(bookings[i].status)!=-1){active.push(bookings[i]);}if(['ACCEPTED','ARRIVED','STARTED'].indexOf(bookings[i].status)!=-1&&userInfo.usertype=='driver'){tracked=bookings[i];fetchBookingLocations(tracked.id)(dispatch);}}dispatch({type:FETCH_BOOKINGS_SUCCESS,payload:{bookings:bookings.reverse(),active:active,tracked:tracked}});if(tracked){dispatch({type:FETCH_BOOKINGS_SUCCESS,payload:null});}}else{dispatch({type:FETCH_BOOKINGS_FAILED,payload:store.getState().languagedata.defaultLanguage.no_bookings});}});};export const updateBooking=booking=>async dispatch=>{const{auth,trackingRef,singleBookingRef,singleUserRef,walletHistoryRef,settingsRef,userRatingsRef}=firebase;dispatch({type:UPDATE_BOOKING,payload:booking});const settingsdata=await get(settingsRef);const settings=settingsdata.val();if(booking.status=='PAYMENT_PENDING'){update(singleBookingRef(booking.id),booking);}if(booking.status=='NEW'||booking.status=='ACCEPTED'){update(singleBookingRef(booking.id),updateDriverQueue(booking));}if(booking.status=='ARRIVED'){let dt=new Date();booking.driver_arrive_time=dt.getTime().toString();update(singleBookingRef(booking.id),booking);if(booking.customer_token){RequestPushMsg(booking.customer_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.driver_near,screen:'BookedCab',params:{bookingId:booking.id}});}}if(booking.status=='STARTED'){let dt=new Date();let localString=dt.getHours()+\":\"+dt.getMinutes()+\":\"+dt.getSeconds();let timeString=dt.getTime();booking.trip_start_time=localString;booking.startTime=timeString;update(singleBookingRef(booking.id),booking);const driverLocation=store.getState().gpsdata.location;push(trackingRef(booking.id),{at:new Date().getTime(),status:'STARTED',lat:driverLocation.lat,lng:driverLocation.lng});if(booking.customer_token){RequestPushMsg(booking.customer_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.driver_journey_msg+booking.reference,screen:'BookedCab',params:{bookingId:booking.id}});}}if(booking.status=='REACHED'){const driverLocation=store.getState().gpsdata.location;push(trackingRef(booking.id),{at:new Date().getTime(),status:'REACHED',lat:driverLocation.lat,lng:driverLocation.lng});let address=await saveAddresses(booking,driverLocation);let bookingObj=await addActualsToBooking(booking,address,driverLocation);update(singleBookingRef(booking.id),bookingObj);if(booking.customer_token){RequestPushMsg(booking.customer_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.driver_completed_ride,screen:'BookedCab',params:{bookingId:booking.id}});}}if(booking.status=='PENDING'){update(singleBookingRef(booking.id),booking);update(singleUserRef(booking.driver),{queue:false});}if(booking.status=='PAID'){if(booking.booking_from_web){booking.status='COMPLETE';}update(singleBookingRef(booking.id),booking);if(booking.driver==auth.currentUser.uid&&(booking.prepaid||booking.payment_mode=='cash'||booking.payment_mode=='wallet')){update(singleUserRef(booking.driver),{queue:false});}if(booking.customer_token){RequestPushMsg(booking.customer_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.success_payment,screen:'BookedCab',params:{bookingId:booking.id}});}if(booking.driver_token){RequestPushMsg(booking.driver_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.success_payment,screen:'BookedCab',params:{bookingId:booking.id}});}}if(booking.status=='COMPLETE'){update(singleBookingRef(booking.id),booking);if(booking.rating){if(booking.driver_token){RequestPushMsg(booking.driver_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.received_rating.toString().replace(\"X\",booking.rating.toString()),screen:'BookedCab',params:{bookingId:booking.id}});}onValue(userRatingsRef(booking.driver),snapshot=>{let ratings=snapshot.val();let rating;if(ratings){let sum=0;const arr=Object.values(ratings);for(let i=0;i<arr.length;i++){sum=sum+arr[i].rate;}sum=sum+booking.rating;rating=parseFloat(sum/(arr.length+1)).toFixed(1);}else{rating=booking.rating;}update(singleUserRef(booking.driver),{rating:rating});push(userRatingsRef(booking.driver),{user:booking.customer,rate:booking.rating,bookingId:booking.id});},{onlyOnce:true});}}};export const cancelBooking=data=>dispatch=>{const{singleBookingRef,singleUserRef,requestedDriversRef}=firebase;dispatch({type:CANCEL_BOOKING,payload:data});update(singleBookingRef(data.booking.id),{status:'CANCELLED',reason:data.reason,cancelledBy:data.cancelledBy}).then(()=>{if(data.booking.driver&&(data.booking.status==='NEW'||data.booking.status==='ACCEPTED'||data.booking.status==='ARRIVED')){update(singleUserRef(data.booking.driver),{queue:false});if(data.booking.driver_token){RequestPushMsg(data.booking.driver_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.booking_cancelled+data.booking.id,screen:'BookedCab',params:{bookingId:data.booking.id}});}if(data.booking.customer_token){RequestPushMsg(data.booking.customer_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.booking_cancelled+data.booking.id,screen:'BookedCab',params:{bookingId:data.booking.id}});}}if(data.booking.status==='NEW'){remove(requestedDriversRef(data.booking.id));}});};export const updateBookingImage=(booking,imageType,imageBlob)=>dispatch=>{const{singleBookingRef,bookingImageRef}=firebase;uploadBytesResumable(bookingImageRef(booking.id,imageType),imageBlob).then(()=>{imageBlob.close();return getDownloadURL(bookingImageRef(booking.id,imageType));}).then(url=>{if(imageType=='pickup_image'){booking.pickup_image=url;}if(imageType=='deliver_image'){booking.deliver_image=url;}update(singleBookingRef(booking.id),booking);dispatch({type:UPDATE_BOOKING,payload:booking});});};export const forceEndBooking=booking=>async dispatch=>{const{trackingRef,singleBookingRef,singleUserRef,walletHistoryRef,settingsRef}=firebase;dispatch({type:UPDATE_BOOKING,payload:booking});if(booking.status=='STARTED'){push(trackingRef(booking.id),{at:new Date().getTime(),status:'REACHED',lat:booking.drop.lat,lng:booking.drop.lng});const end_time=new Date();const diff=(end_time.getTime()-parseFloat(booking.startTime))/1000;const totalTimeTaken=Math.abs(Math.round(diff));booking.trip_end_time=end_time.getHours()+\":\"+end_time.getMinutes()+\":\"+end_time.getSeconds();booking.endTime=end_time.getTime();booking.total_trip_time=totalTimeTaken;if(booking.customer_token){RequestPushMsg(booking.customer_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.driver_completed_ride,screen:'BookedCab',params:{bookingId:booking.id}});}update(singleUserRef(booking.driver),{queue:false});if(booking.prepaid){const settingsdata=await get(settingsRef);const settings=settingsdata.val();onValue(singleUserRef(booking.driver),snapshot=>{let walletBalance=parseFloat(snapshot.val().walletBalance);walletBalance=walletBalance+parseFloat(booking.driver_share);if(parseFloat(booking.cashPaymentAmount)>0){walletBalance=walletBalance-parseFloat(booking.cashPaymentAmount);}update(singleUserRef(booking.driver),{\"walletBalance\":parseFloat(walletBalance.toFixed(settings.decimal))});let details={type:'Credit',amount:parseFloat(booking.driver_share).toFixed(settings.decimal),date:new Date().getTime(),txRef:booking.id};push(walletHistoryRef(booking.driver),details);if(parseFloat(booking.cashPaymentAmount)>0){let details={type:'Debit',amount:booking.cashPaymentAmount,date:new Date().getTime(),txRef:booking.id};push(walletHistoryRef(booking.driver),details);}},{onlyOnce:true});if(booking.customer_token){RequestPushMsg(booking.customer_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.success_payment,screen:'BookedCab',params:{bookingId:booking.id}});}if(booking.driver_token){RequestPushMsg(booking.driver_token,{title:store.getState().languagedata.defaultLanguage.notification_title,msg:store.getState().languagedata.defaultLanguage.success_payment,screen:'BookedCab',params:{bookingId:booking.id}});}booking.status='PAID';}else{booking.status='PENDING';}update(singleBookingRef(booking.id),booking);}};","map":{"version":3,"names":["FETCH_BOOKINGS","FETCH_BOOKINGS_SUCCESS","FETCH_BOOKINGS_FAILED","UPDATE_BOOKING","CANCEL_BOOKING","fetchBookingLocations","RequestPushMsg","store","firebase","addActualsToBooking","saveAddresses","updateDriverQueue","get","onValue","update","off","remove","push","uploadBytesResumable","getDownloadURL","fetchBookings","dispatch","bookingListRef","type","payload","userInfo","getState","auth","profile","uid","usertype","snapshot","val","data","active","tracked","bookings","Object","keys","map","i","id","pickupAddress","pickup","add","dropAddress","drop","discount","cashPaymentAmount","cardPaymentAmount","length","indexOf","status","reverse","languagedata","defaultLanguage","no_bookings","updateBooking","booking","trackingRef","singleBookingRef","singleUserRef","walletHistoryRef","settingsRef","userRatingsRef","settingsdata","settings","dt","Date","driver_arrive_time","getTime","toString","customer_token","title","notification_title","msg","driver_near","screen","params","bookingId","localString","getHours","getMinutes","getSeconds","timeString","trip_start_time","startTime","driverLocation","gpsdata","location","at","lat","lng","driver_journey_msg","reference","address","bookingObj","driver_completed_ride","driver","queue","booking_from_web","currentUser","prepaid","payment_mode","success_payment","driver_token","rating","received_rating","replace","ratings","sum","arr","values","rate","parseFloat","toFixed","user","customer","onlyOnce","cancelBooking","requestedDriversRef","reason","cancelledBy","then","booking_cancelled","updateBookingImage","imageType","imageBlob","bookingImageRef","close","url","pickup_image","deliver_image","forceEndBooking","end_time","diff","totalTimeTaken","Math","abs","round","trip_end_time","endTime","total_trip_time","walletBalance","driver_share","decimal","details","amount","date","txRef"],"sources":["C:/Users/CAJAL/Desktop/main/Sourcecode/common/src/actions/bookinglistactions.js"],"sourcesContent":["import {\n  FETCH_BOOKINGS,\n  FETCH_BOOKINGS_SUCCESS,\n  FETCH_BOOKINGS_FAILED,\n  UPDATE_BOOKING,\n  CANCEL_BOOKING\n} from \"../store/types\";\nimport { fetchBookingLocations } from '../actions/locationactions';\nimport { RequestPushMsg } from '../other/NotificationFunctions';\nimport store from '../store/store';\nimport { firebase } from '../config/configureFirebase';\nimport { addActualsToBooking, saveAddresses, updateDriverQueue } from \"../other/sharedFunctions\";\nimport { get, onValue, update, off, remove, push } from \"firebase/database\";\nimport { uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n\nexport const fetchBookings = () => (dispatch) => {\n\n  const {\n    bookingListRef,\n  } = firebase;\n\n  dispatch({\n    type: FETCH_BOOKINGS,\n    payload: null,\n  });\n\n  const userInfo = store.getState().auth.profile;\n\n  off(bookingListRef(userInfo.uid, userInfo.usertype));\n  onValue(bookingListRef(userInfo.uid, userInfo.usertype),(snapshot) => {\n    if (snapshot.val()) {\n      const data = snapshot.val();\n      const active = [];\n      let tracked = null;\n      const bookings = Object.keys(data)\n        .map((i) => {\n          data[i].id = i;\n          data[i].pickupAddress = data[i].pickup.add;\n          data[i].dropAddress = data[i].drop.add;\n          data[i].discount = data[i].discount\n            ? data[i].discount\n            : 0;\n          data[i].cashPaymentAmount = data[i].cashPaymentAmount\n            ? data[i].cashPaymentAmount\n            : 0;\n          data[i].cardPaymentAmount = data[i].cardPaymentAmount\n            ? data[i].cardPaymentAmount\n            : 0;\n          return data[i];\n        });\n      for (let i = 0; i < bookings.length; i++) {\n        if (['PAYMENT_PENDING','NEW', 'ACCEPTED', 'ARRIVED', 'STARTED', 'REACHED', 'PENDING', 'PAID'].indexOf(bookings[i].status) != -1) {\n          active.push(bookings[i]);\n        }\n        if ((['ACCEPTED', 'ARRIVED', 'STARTED'].indexOf(bookings[i].status) != -1) && userInfo.usertype == 'driver') {\n          tracked = bookings[i];\n          fetchBookingLocations(tracked.id)(dispatch);\n        }\n      }\n      dispatch({\n        type: FETCH_BOOKINGS_SUCCESS,\n        payload: {\n          bookings: bookings.reverse(),\n          active: active,\n          tracked: tracked\n        },\n      });\n      if (tracked) {\n        dispatch({\n          type: FETCH_BOOKINGS_SUCCESS,\n          payload: null\n        });\n      }\n    } else {\n      dispatch({\n        type: FETCH_BOOKINGS_FAILED,\n        payload: store.getState().languagedata.defaultLanguage.no_bookings,\n      });\n    }\n  });\n};\n\nexport const updateBooking = (booking) => async (dispatch) => {\n\n  const {\n    auth,\n    trackingRef,\n    singleBookingRef,\n    singleUserRef,\n    walletHistoryRef,\n    settingsRef,\n    userRatingsRef\n  } = firebase;\n\n  dispatch({\n    type: UPDATE_BOOKING,\n    payload: booking,\n  });\n\n  const settingsdata = await get(settingsRef);\n  const settings = settingsdata.val();\n  \n  if (booking.status == 'PAYMENT_PENDING') {\n    update(singleBookingRef(booking.id),booking);\n  }\n  if (booking.status == 'NEW' || booking.status == 'ACCEPTED') {\n    update(singleBookingRef(booking.id), updateDriverQueue(booking));\n  }\n  if (booking.status == 'ARRIVED') {\n    let dt = new Date();\n    booking.driver_arrive_time = dt.getTime().toString();\n    update(singleBookingRef(booking.id),booking);\n    if(booking.customer_token){\n      RequestPushMsg(\n        booking.customer_token,\n        {\n            title: store.getState().languagedata.defaultLanguage.notification_title,\n            msg: store.getState().languagedata.defaultLanguage.driver_near,\n            screen: 'BookedCab',\n            params: { bookingId: booking.id }\n        });\n    }\n  }\n  \n  if (booking.status == 'STARTED') {\n    let dt = new Date();\n    let localString = dt.getHours() + \":\" + dt.getMinutes() + \":\" + dt.getSeconds();\n    let timeString = dt.getTime();\n    booking.trip_start_time = localString;\n    booking.startTime = timeString;\n    update(singleBookingRef(booking.id),booking);\n\n    const driverLocation = store.getState().gpsdata.location;\n    \n    push(trackingRef(booking.id),{\n      at: new Date().getTime(),\n      status: 'STARTED',\n      lat: driverLocation.lat,\n      lng: driverLocation.lng\n    });\n\n    if(booking.customer_token){\n      RequestPushMsg(\n        booking.customer_token,\n        {\n            title: store.getState().languagedata.defaultLanguage.notification_title,\n            msg: store.getState().languagedata.defaultLanguage.driver_journey_msg + booking.reference,\n            screen: 'BookedCab',\n            params: { bookingId: booking.id }\n        });\n      }\n   }\n\n  if (booking.status == 'REACHED') {\n\n    const driverLocation = store.getState().gpsdata.location;\n\n    push(trackingRef(booking.id),{\n      at: new Date().getTime(),\n      status: 'REACHED',\n      lat: driverLocation.lat,\n      lng: driverLocation.lng\n    });\n\n    let address = await saveAddresses(booking,driverLocation);\n\n    let bookingObj = await addActualsToBooking(booking, address, driverLocation);\n    update(singleBookingRef(booking.id),bookingObj);\n\n    if(booking.customer_token){\n      RequestPushMsg(\n        booking.customer_token,\n        {\n            title: store.getState().languagedata.defaultLanguage.notification_title,\n            msg: store.getState().languagedata.defaultLanguage.driver_completed_ride,\n            screen: 'BookedCab',\n            params: { bookingId: booking.id }\n        });\n    }\n  }\n\n  if (booking.status == 'PENDING') {\n    update(singleBookingRef(booking.id),booking);\n    update(singleUserRef(booking.driver), { queue: false });\n  }\n  if (booking.status == 'PAID') {\n    if(booking.booking_from_web){\n      booking.status = 'COMPLETE';\n    }\n    update(singleBookingRef(booking.id), booking);\n    if(booking.driver == auth.currentUser.uid && (booking.prepaid || booking.payment_mode == 'cash' || booking.payment_mode == 'wallet')){\n      update(singleUserRef(booking.driver), { queue: false });\n    }\n\n    if(booking.customer_token){\n      RequestPushMsg(\n        booking.customer_token,\n        {\n            title: store.getState().languagedata.defaultLanguage.notification_title,\n            msg: store.getState().languagedata.defaultLanguage.success_payment,\n            screen: 'BookedCab',\n            params: { bookingId: booking.id }\n        });\n    }\n\n    if(booking.driver_token){\n        RequestPushMsg(\n          booking.driver_token,\n          {\n              title: store.getState().languagedata.defaultLanguage.notification_title,\n              msg: store.getState().languagedata.defaultLanguage.success_payment,\n              screen: 'BookedCab',\n              params: { bookingId: booking.id }\n          });\n      }\n    }\n\n  if (booking.status == 'COMPLETE') {\n    update(singleBookingRef(booking.id), booking);\n    if (booking.rating) {\n      if(booking.driver_token){\n        RequestPushMsg(\n          booking.driver_token,\n          {\n              title: store.getState().languagedata.defaultLanguage.notification_title,\n              msg:  store.getState().languagedata.defaultLanguage.received_rating.toString().replace(\"X\", booking.rating.toString()),\n              screen: 'BookedCab',\n              params: { bookingId: booking.id }\n          });\n      }\n      onValue(userRatingsRef(booking.driver), snapshot => {\n        let ratings = snapshot.val();\n        let rating;\n        if(ratings){\n          let sum = 0;\n          const arr = Object.values(ratings);\n          for (let i = 0; i< arr.length ; i++){\n            sum = sum + arr[i].rate\n          }\n          sum = sum + booking.rating;\n          rating = parseFloat(sum / (arr.length + 1)).toFixed(1);\n        }else{\n          rating =  booking.rating;\n        }\n        update(singleUserRef(booking.driver),{rating: rating});\n        push(userRatingsRef(booking.driver), {\n          user: booking.customer,\n          rate: booking.rating,\n          bookingId: booking.id\n        });\n      }, { onlyOnce: true});\n    }\n  }\n};\n\nexport const cancelBooking = (data) => (dispatch) => {\n  const {\n    singleBookingRef,\n    singleUserRef,\n    requestedDriversRef\n  } = firebase;\n\n  dispatch({\n    type: CANCEL_BOOKING,\n    payload: data,\n  });\n\n  update(singleBookingRef(data.booking.id),{\n    status: 'CANCELLED',\n    reason: data.reason,\n    cancelledBy: data.cancelledBy\n  }).then(() => {\n    if (data.booking.driver && (data.booking.status === 'NEW' || data.booking.status === 'ACCEPTED' || data.booking.status === 'ARRIVED')) {\n      update(singleUserRef(data.booking.driver),{ queue: false });\n      if(data.booking.driver_token){\n        RequestPushMsg(\n          data.booking.driver_token,\n          {\n              title: store.getState().languagedata.defaultLanguage.notification_title,\n              msg:  store.getState().languagedata.defaultLanguage.booking_cancelled + data.booking.id,\n              screen: 'BookedCab',\n              params: { bookingId: data.booking.id }\n          });\n        }\n\n        if(data.booking.customer_token){\n          RequestPushMsg(\n            data.booking.customer_token,\n            {\n                title: store.getState().languagedata.defaultLanguage.notification_title,\n                msg:  store.getState().languagedata.defaultLanguage.booking_cancelled + data.booking.id,\n                screen: 'BookedCab',\n                params: { bookingId: data.booking.id }\n            });\n        }\n   }\n    if (data.booking.status === 'NEW') {\n      remove(requestedDriversRef(data.booking.id));\n    }\n  });\n};\n\nexport const updateBookingImage = (booking, imageType, imageBlob) => (dispatch) => {\n  const   {\n    singleBookingRef,\n    bookingImageRef\n  } = firebase;\n  uploadBytesResumable(bookingImageRef(booking.id,imageType), imageBlob).then(() => {\n    imageBlob.close()\n    return getDownloadURL(bookingImageRef(booking.id,imageType))\n  }).then((url) => {\n    if(imageType == 'pickup_image'){\n      booking.pickup_image = url;\n    }\n    if(imageType == 'deliver_image'){\n      booking.deliver_image = url;\n    }\n    update(singleBookingRef(booking.id), booking);\n    dispatch({\n      type: UPDATE_BOOKING,\n      payload: booking,\n    });\n  })\n};\n\nexport const forceEndBooking = (booking) => async (dispatch) => {\n\n  const {\n    trackingRef,\n    singleBookingRef,\n    singleUserRef,\n    walletHistoryRef,\n    settingsRef,\n  } = firebase;\n\n  dispatch({\n    type: UPDATE_BOOKING,\n    payload: booking,\n  });\n  \n  if (booking.status == 'STARTED') {\n\n    push(trackingRef(booking.id),{\n      at: new Date().getTime(),\n      status: 'REACHED',\n      lat: booking.drop.lat,\n      lng: booking.drop.lng\n    });\n\n    const end_time = new Date();\n    const diff = (end_time.getTime() - parseFloat(booking.startTime)) / 1000;\n    const totalTimeTaken = Math.abs(Math.round(diff));\n    booking.trip_end_time = end_time.getHours() + \":\" + end_time.getMinutes() + \":\" + end_time.getSeconds();\n    booking.endTime = end_time.getTime();\n    booking.total_trip_time = totalTimeTaken;\n\n    if(booking.customer_token){\n      RequestPushMsg(\n        booking.customer_token,\n        {\n            title: store.getState().languagedata.defaultLanguage.notification_title,\n            msg: store.getState().languagedata.defaultLanguage.driver_completed_ride,\n            screen: 'BookedCab',\n            params: { bookingId: booking.id }\n        });\n    }\n\n    update(singleUserRef(booking.driver),{ queue: false });\n\n    if(booking.prepaid){\n\n      const settingsdata = await get(settingsRef);\n      const settings = settingsdata.val();\n\n      onValue(singleUserRef(booking.driver), snapshot => {\n        let walletBalance = parseFloat(snapshot.val().walletBalance);\n        walletBalance = walletBalance + parseFloat(booking.driver_share);\n        if(parseFloat(booking.cashPaymentAmount)>0){\n          walletBalance = walletBalance - parseFloat(booking.cashPaymentAmount);\n        }\n        update(singleUserRef(booking.driver),{\"walletBalance\": parseFloat(walletBalance.toFixed(settings.decimal))});\n\n        let details = {\n          type: 'Credit',\n          amount: parseFloat(booking.driver_share).toFixed(settings.decimal),\n          date: new Date().getTime(),\n          txRef: booking.id\n        }\n        push(walletHistoryRef(booking.driver),details);\n        \n        if(parseFloat(booking.cashPaymentAmount)>0){\n          let details = {\n            type: 'Debit',\n            amount: booking.cashPaymentAmount,\n            date: new Date().getTime(),\n            txRef: booking.id\n          }\n          push(walletHistoryRef(booking.driver), details);\n        }  \n      },{onlyOnce: true});\n\n      if(booking.customer_token){\n        RequestPushMsg(\n          booking.customer_token,\n          {\n              title: store.getState().languagedata.defaultLanguage.notification_title,\n              msg: store.getState().languagedata.defaultLanguage.success_payment,\n              screen: 'BookedCab',\n              params: { bookingId: booking.id }\n          });\n      }\n\n      if(booking.driver_token){\n        RequestPushMsg(\n          booking.driver_token,\n          {\n              title: store.getState().languagedata.defaultLanguage.notification_title,\n              msg: store.getState().languagedata.defaultLanguage.success_payment,\n              screen: 'BookedCab',\n              params: { bookingId: booking.id }\n          });\n        }\n      booking.status = 'PAID';\n    } else{\n      booking.status = 'PENDING';\n    }\n\n    update(singleBookingRef(booking.id), booking);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}