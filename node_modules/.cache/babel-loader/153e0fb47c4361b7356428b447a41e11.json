{"ast":null,"code":"import{FETCH_MESSAGES,FETCH_MESSAGES_SUCCESS,FETCH_MESSAGES_FAILED,SEND_MESSAGE,STOP_FETCH_MESSAGES}from\"../store/types\";import store from'../store/store';import{firebase}from'../config/configureFirebase';import{RequestPushMsg}from'../other/NotificationFunctions';import{onValue,push,off,child}from\"firebase/database\";export const fetchChatMessages=bookingId=>dispatch=>{const{chatRef}=firebase;dispatch({type:FETCH_MESSAGES,payload:bookingId});onValue(chatRef(bookingId),snapshot=>{if(snapshot.val()){let rootEntry=snapshot.val();let allMesseges=[];for(let key in rootEntry){let entryKey=rootEntry[key];for(let msgKey in entryKey){entryKey[msgKey].smsId=msgKey;allMesseges.push(entryKey[msgKey]);}}dispatch({type:FETCH_MESSAGES_SUCCESS,payload:allMesseges});}else{dispatch({type:FETCH_MESSAGES_FAILED,payload:store.getState().languagedata.defaultLanguage.chat_not_found});}});};export const sendMessage=data=>dispatch=>{const{chatRef}=firebase;const chatId=data.booking.customer+','+data.booking.driver;var today=new Date();var time=today.getHours()+\":\"+today.getMinutes();var dd=String(today.getDate()).padStart(2,'0');var mm=String(today.getMonth()+1).padStart(2,'0');var yyyy=today.getFullYear();today=mm+':'+dd+':'+yyyy;const msg={message:data.message,from:data.role=='customer'?data.booking.customer:data.booking.driver,type:\"msg\",msgDate:today,msgTime:time,createdAt:new Date().toString(),source:data.role};push(child(chatRef(data.booking.id),chatId),msg);if(data.role=='customer'){if(data.booking.driver_token){RequestPushMsg(data.booking.driver_token,{title:store.getState().languagedata.defaultLanguage.notification_title+store.getState().languagedata.defaultLanguage.chat_requested,msg:data.message,screen:'onlineChat',params:{bookingId:data.booking.id}});}}else{if(data.booking.customer_token){RequestPushMsg(data.booking.customer_token,{title:store.getState().languagedata.defaultLanguage.notification_title+store.getState().languagedata.defaultLanguage.chat_requested,msg:data.message,screen:'onlineChat',params:{bookingId:data.booking.id}});}}dispatch({type:SEND_MESSAGE,payload:msg});};export const stopFetchMessages=bookingId=>dispatch=>{const{chatRef}=firebase;dispatch({type:STOP_FETCH_MESSAGES,payload:bookingId});off(chatRef(bookingId));};","map":{"version":3,"names":["FETCH_MESSAGES","FETCH_MESSAGES_SUCCESS","FETCH_MESSAGES_FAILED","SEND_MESSAGE","STOP_FETCH_MESSAGES","store","firebase","RequestPushMsg","onValue","push","off","child","fetchChatMessages","bookingId","dispatch","chatRef","type","payload","snapshot","val","rootEntry","allMesseges","key","entryKey","msgKey","smsId","getState","languagedata","defaultLanguage","chat_not_found","sendMessage","data","chatId","booking","customer","driver","today","Date","time","getHours","getMinutes","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","msg","message","from","role","msgDate","msgTime","createdAt","toString","source","id","driver_token","title","notification_title","chat_requested","screen","params","customer_token","stopFetchMessages"],"sources":["C:/Users/CAJAL/Desktop/main/Sourcecode/common/src/actions/chatactions.js"],"sourcesContent":["import {\n    FETCH_MESSAGES,\n    FETCH_MESSAGES_SUCCESS,\n    FETCH_MESSAGES_FAILED,\n    SEND_MESSAGE,\n    STOP_FETCH_MESSAGES\n} from \"../store/types\";\nimport store from '../store/store';\nimport { firebase } from '../config/configureFirebase';\nimport { RequestPushMsg } from '../other/NotificationFunctions';\nimport { onValue, push, off, child } from \"firebase/database\";\n\nexport const fetchChatMessages = (bookingId) => (dispatch) => {\n\n    const {\n        chatRef\n    } = firebase;\n  \n    dispatch({\n        type: FETCH_MESSAGES,\n        payload: bookingId,\n    });\n    onValue(chatRef(bookingId), snapshot => {\n        if(snapshot.val()){\n            let rootEntry = snapshot.val();\n            let allMesseges = [];\n            for (let key in rootEntry) {\n                let entryKey = rootEntry[key]\n                for (let msgKey in entryKey) {\n                  entryKey[msgKey].smsId = msgKey\n                  allMesseges.push(entryKey[msgKey])\n                }\n            }\n            dispatch({\n                type: FETCH_MESSAGES_SUCCESS,\n                payload: allMesseges,\n            });\n        }else{\n            dispatch({\n                type: FETCH_MESSAGES_FAILED,\n                payload: store.getState().languagedata.defaultLanguage.chat_not_found,\n            });\n        }\n    })\n};\n\nexport const sendMessage = (data) => (dispatch) => {\n\n    const {\n        chatRef\n    } = firebase;\n\n    const chatId = data.booking.customer + ','  + data.booking.driver\n    var today = new Date();\n    var time = today.getHours() + \":\" + today.getMinutes();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); \n    var yyyy = today.getFullYear();\n    today = mm + ':' + dd + ':' + yyyy;\n    \n    const msg = {\n        message:data.message,\n        from: data.role == 'customer'? data.booking.customer : data.booking.driver,\n        type:\"msg\",\n        msgDate:today,\n        msgTime:time,\n        createdAt: new Date().toString(),\n        source: data.role\n    };\n\n    push(child(chatRef(data.booking.id), chatId), msg);\n\n    if(data.role == 'customer'){\n        if(data.booking.driver_token){\n            RequestPushMsg(\n                data.booking.driver_token,\n                {\n                    title: store.getState().languagedata.defaultLanguage.notification_title  + store.getState().languagedata.defaultLanguage.chat_requested,\n                    msg: data.message,\n                    screen: 'onlineChat',\n                    params: { bookingId: data.booking.id }\n                });\n        }\n    }else{\n        if(data.booking.customer_token){\n            RequestPushMsg(\n                data.booking.customer_token,\n                {\n                    title: store.getState().languagedata.defaultLanguage.notification_title  + store.getState().languagedata.defaultLanguage.chat_requested,\n                    msg: data.message,\n                    screen: 'onlineChat',\n                    params: { bookingId: data.booking.id}\n                });\n        }\n    }\n\n    dispatch({\n        type: SEND_MESSAGE,\n        payload: msg,\n    });\n}\n\nexport const stopFetchMessages = (bookingId) => (dispatch) => {\n\n    const {\n        chatRef \n    } = firebase;\n\n    dispatch({\n        type: STOP_FETCH_MESSAGES,\n        payload: bookingId,\n    });\n    off(chatRef(bookingId));\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}