{"ast":null,"code":"import{FETCH_LANGUAGE,FETCH_LANGUAGE_SUCCESS,FETCH_LANGUAGE_FAILED,EDIT_LANGUAGE}from\"../store/types\";import{firebase}from'../config/configureFirebase';import{onValue,set,push,remove,update}from\"firebase/database\";import{getLangKey}from\"../other/getLangKey\";export const fetchLanguages=()=>dispatch=>{const{languagesRef}=firebase;dispatch({type:FETCH_LANGUAGE,payload:null});onValue(languagesRef,snapshot=>{if(snapshot.val()){const data=snapshot.val();let defLang=null;const arr=Object.keys(data).map(i=>{data[i].id=i;if(data[i].default){defLang=data[i].keyValuePairs;}return data[i];});dispatch({type:FETCH_LANGUAGE_SUCCESS,payload:{defaultLanguage:defLang,langlist:arr}});}else{dispatch({type:FETCH_LANGUAGE_FAILED,payload:\"No Languages available.\"});}});};export const editLanguage=(lang,method)=>dispatch=>{const{languagesRef,languagesEditRef}=firebase;dispatch({type:EDIT_LANGUAGE,payload:{lang,method}});if(method==='Add'){push(languagesRef,lang);}else if(method==='Delete'){remove(languagesEditRef(lang.id));}else{set(languagesEditRef(lang.id),lang);}};export const convertLanguage=async(word,userLangLocale)=>{const{languagesRef,langEditRef,config}=firebase;let langKey=getLangKey(word);onValue(languagesRef,async snapshot=>{if(snapshot.val()){const data=snapshot.val();const langLocaleArr=Object.keys(data).map(i=>{data[i].id=i;return{langLocale:data[i].langLocale,id:data[i].id};});let defLangLocale=\"\";if(userLangLocale){defLangLocale=userLangLocale;}else{const defLocale=Object.keys(data).filter(i=>{data[i].id=i;return data[i].default===true;})[0];defLangLocale=data[defLocale].langLocale;}for(let j=0;j<langLocaleArr.length;j++){try{if(langLocaleArr[j].langLocale===defLangLocale){update(langEditRef(langLocaleArr[j].id),{[langKey]:word});}else{const response=await fetch(\"https://us-central1-\".concat(config.projectId,\".cloudfunctions.net/gettranslation?str=\").concat(word,\"&from=\").concat(defLangLocale,\"&to=\").concat(langLocaleArr[j].langLocale),{method:'GET',headers:{'Content-Type':'application/json'}});const json=await response.json();if(json){update(langEditRef(langLocaleArr[j].id),{[langKey]:json.text});}}}catch(err){console.log(\"errror occured in language add\",err);};}}},{onlyOnce:true});};","map":{"version":3,"names":["FETCH_LANGUAGE","FETCH_LANGUAGE_SUCCESS","FETCH_LANGUAGE_FAILED","EDIT_LANGUAGE","firebase","onValue","set","push","remove","update","getLangKey","fetchLanguages","dispatch","languagesRef","type","payload","snapshot","val","data","defLang","arr","Object","keys","map","i","id","default","keyValuePairs","defaultLanguage","langlist","editLanguage","lang","method","languagesEditRef","convertLanguage","word","userLangLocale","langEditRef","config","langKey","langLocaleArr","langLocale","defLangLocale","defLocale","filter","j","length","response","fetch","concat","projectId","headers","json","text","err","console","log","onlyOnce"],"sources":["C:/Users/CAJAL/Desktop/main/Sourcecode/common/src/actions/languageactions.js"],"sourcesContent":["import {\n    FETCH_LANGUAGE,\n    FETCH_LANGUAGE_SUCCESS,\n    FETCH_LANGUAGE_FAILED,\n    EDIT_LANGUAGE\n} from \"../store/types\";\nimport { firebase } from '../config/configureFirebase';\nimport { onValue, set, push, remove, update } from \"firebase/database\";\nimport { getLangKey } from \"../other/getLangKey\";\n\nexport const fetchLanguages = () => (dispatch) => {\n\n    const {\n        languagesRef\n    } = firebase;\n\n    dispatch({\n        type: FETCH_LANGUAGE,\n        payload: null\n    });\n    onValue(languagesRef, snapshot => {\n        if (snapshot.val()) {\n            const data = snapshot.val();\n            let defLang = null;\n            const arr = Object.keys(data).map(i => {\n                data[i].id = i;\n                if(data[i].default){\n                    defLang = data[i].keyValuePairs;\n                }\n                return data[i]\n            });\n            dispatch({\n                type: FETCH_LANGUAGE_SUCCESS,\n                payload: {\n                    defaultLanguage: defLang,\n                    langlist: arr\n                }\n            });\n        } else {\n            dispatch({\n                type: FETCH_LANGUAGE_FAILED,\n                payload: \"No Languages available.\"\n            });\n        }\n    });\n};\n\nexport const editLanguage = (lang, method) => (dispatch) => {\n    const {\n        languagesRef,\n        languagesEditRef\n    } = firebase;\n    dispatch({\n        type: EDIT_LANGUAGE,\n        payload: { lang, method }\n    });\n    if (method === 'Add') {\n        push(languagesRef, lang);\n    } else if (method === 'Delete') {\n        remove(languagesEditRef(lang.id));\n    } else {\n        set(languagesEditRef(lang.id),lang);\n    }\n}\n\n\nexport const convertLanguage = async (word, userLangLocale)=>{\n    const {\n        languagesRef,\n        langEditRef,\n        config,\n    } = firebase;\n    \n    let langKey = getLangKey(word);\n\n    onValue(languagesRef, async (snapshot) => {\n        if (snapshot.val()) {\n            const data = snapshot.val();\n            const langLocaleArr = Object.keys(data).map(i => {\n                data[i].id = i;\n                return {langLocale : data[i].langLocale, id: data[i].id}\n            });\n\n            let defLangLocale = \"\";\n\n            if(userLangLocale){\n                defLangLocale = userLangLocale;\n            }else{\n                const defLocale = Object.keys(data).filter(i => {\n                    data[i].id = i;\n                    return data[i].default === true;\n                })[0];\n\n                defLangLocale = data[defLocale].langLocale;\n            }\n\n            for (let j = 0; j < langLocaleArr.length; j++){\n                try{\n                    if(langLocaleArr[j].langLocale === defLangLocale){\n                        update(langEditRef(langLocaleArr[j].id),{[langKey]:word})\n                    }else{\n                        const response = await fetch(`https://us-central1-${config.projectId}.cloudfunctions.net/gettranslation?str=${word}&from=${defLangLocale}&to=${langLocaleArr[j].langLocale}`, {\n                            method: 'GET',\n                            headers: {\n                              'Content-Type': 'application/json'\n                            }\n                          })\n                          const json = await response.json();\n                          if(json){\n                            update(langEditRef(langLocaleArr[j].id),{[langKey]:json.text})\n                          }\n                    }\n                  }\n                  catch(err) {\n                    console.log(\"errror occured in language add\", err)\n                  };\n            }\n        }\n    }, {onlyOnce: true});\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}